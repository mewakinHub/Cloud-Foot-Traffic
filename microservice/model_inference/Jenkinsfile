pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-southeast-1'
        ECR_REPO_URI = '891376919848.dkr.ecr.ap-southeast-1.amazonaws.com/youtube-detection-app'
        DOCKERHUB_REPO = 'pansaar1553/youtube-detection-app'
        DOCKERHUB_CREDENTIALS = credentials('911be91f-9bee-4fab-9944-749709f26585')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mewakinHub/Cloud-Foot-Traffic.git'
            }
        }

        stage('Debug Workspace') {
            steps {
                script {
                    sh 'ls -la ${WORKSPACE}/microservices/model_inference'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('microservices/model_inference') {
                        sh "docker build -f Dockerfile -t ${DOCKERHUB_REPO}:latest ."
                    }
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    dir('microservices/model_inference') {
                        sh '''
                        docker run --rm ${DOCKERHUB_REPO}:latest \
                            robot --outputdir /app/output /app/tests
                        '''
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}
                    docker tag ${DOCKERHUB_REPO}:latest ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:latest
                    '''
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh '''
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKERHUB_REPO}:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images...'
            sh '''
            docker rmi ${DOCKERHUB_REPO}:latest || true
            docker rmi ${ECR_REPO_URI}:latest || true
            '''
        }
    }
}
