pipeline {
    agent any
    
    environment {
        AWS_REGION = 'your-aws-region'             // Set your AWS region
        ECR_REPO_URI = 'your-ecr-repo-uri'         // E.g., '123456789012.dkr.ecr.us-west-2.amazonaws.com/your-repo'
        DOCKERHUB_REPO = 'your-dockerhub-repo'     // E.g., 'your-dockerhub-username/your-repo'
        IMAGE_TAG = "latest"                       // Default image tag
    }
    
    options {
        // Retry steps if they fail to handle intermittent issues
        retry(2)
        // Timeout for each stage
        timeout(time: 10, unit: 'MINUTES')
    }
    
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag for the Docker image')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build from')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out branch: ${params.BRANCH}"
                    // Checkout specific branch
                    git branch: "${params.BRANCH}", url: 'https://github.com/mewakinHub/Cloud-Foot-Traffic.git'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir('microservices/model_inference') {
                        // Build Docker image
                        echo "Building Docker image: ${DOCKERHUB_REPO}:${params.IMAGE_TAG}"
                        sh "docker build -t ${DOCKERHUB_REPO}:${params.IMAGE_TAG} ."
                    }
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                script {
                    echo "Authenticating with ECR"
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | \
                    docker login --username AWS --password-stdin ${ECR_REPO_URI}
                    """
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    echo "Pushing image to ECR: ${ECR_REPO_URI}:${params.IMAGE_TAG}"
                    sh """
                    docker tag ${DOCKERHUB_REPO}:${params.IMAGE_TAG} ${ECR_REPO_URI}:${params.IMAGE_TAG}
                    docker push ${ECR_REPO_URI}:${params.IMAGE_TAG}
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            environment {
                DOCKERHUB_USERNAME = credentials('dockerhub-username')
                DOCKERHUB_PASSWORD = credentials('dockerhub-password')
            }
            steps {
                script {
                    echo "Authenticating with Docker Hub"
                    sh """
                    echo ${DOCKERHUB_PASSWORD} | \
                    docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                    """
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "Pushing image to Docker Hub: ${DOCKERHUB_REPO}:${params.IMAGE_TAG}"
                    sh "docker push ${DOCKERHUB_REPO}:${params.IMAGE_TAG}"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Cleaning up Docker environment"
                sh """
                docker rmi ${DOCKERHUB_REPO}:${params.IMAGE_TAG} || true
                docker rmi ${ECR_REPO_URI}:${params.IMAGE_TAG} || true
                """
            }
        }
        failure {
            echo "Build failed. Please check logs for details."
        }
        success {
            echo "Build succeeded and images are pushed successfully."
        }
    }
}
