pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-southeast-1'
        ECR_REPO_URI = '891376919848.dkr.ecr.ap-southeast-1.amazonaws.com/youtube-detection-app'
        DOCKERHUB_REPO = 'pansaar1553/youtube-detection-app'
        DOCKERHUB_CREDENTIALS = credentials('911be91f-9bee-4fab-9944-749709f26585')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mewakinHub/Cloud-Foot-Traffic.git'
            }
        }

        stage('Debug Workspace') {
            steps {
                script {
                    // Check if the directory exists before listing files
                    sh '''
                    if [ -d "microservice/model_inference" ]; then
                        ls -la microservice/model_inference
                    else
                        echo "Directory microservice/model_inference does not exist."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('microservice/model_inference') {
                        sh '''
                        echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker build -t ${DOCKERHUB_REPO}:latest .
                        '''
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    dir('microservice/model_inference') {
                        sh '''
                        echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker run --rm \
                            -v ~/.aws:/root/.aws \
                            ${DOCKERHUB_REPO}:latest \
                            aws ecr get-login-password --region ${AWS_REGION} | \
                            docker login --username AWS --password-stdin ${ECR_REPO_URI}
                        docker tag ${DOCKERHUB_REPO}:latest ${ECR_REPO_URI}:latest
                        docker push ${ECR_REPO_URI}:latest
                        '''
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh '''
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKERHUB_REPO}:latest
                    '''
                }
            }
        }
    }

    // POST section
    post {
        always {
            echo 'Cleaning up Docker images...'
            sh "docker rmi ${DOCKERHUB_REPO}:latest || true"
            sh "docker rmi ${ECR_REPO_URI}:latest || true"
        }
        failure {
            echo "Build failed. Please check logs for details."
        }
        success {
            echo "Build succeeded and images are pushed successfully."
        }
    }
}
