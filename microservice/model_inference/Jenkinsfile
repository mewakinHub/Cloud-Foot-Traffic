pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-southeast-1'
        ECR_REPO_URI = '891376919848.dkr.ecr.ap-southeast-1.amazonaws.com/youtube-detection-app'
        DOCKERHUB_REPO = 'pansaar1553/youtube-detection-app'
        // DOCKERHUB_CREDENTIALS = credentials('911be91f-9bee-4fab-9944-749709f26585')
        DOCKERHUB_USERNAME = credentials('911be91f-9bee-4fab-9944-749709f26585').username
        DOCKERHUB_PASSWORD = credentials('911be91f-9bee-4fab-9944-749709f26585').password
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mewakinHub/Cloud-Foot-Traffic.git'
            }
        }
        
        stage('Install AWS CLI') {
            steps {
                script {
                    sh """
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
                    aws --version
                    """
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                sh 'ls -la microservices/model_inference'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('microservice/model_inference') {
                        // Login to DockerHub
                        sh """
                        echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker build -t ${DOCKERHUB_REPO}:latest .
                        """
                    }
                }
            }
        }

        stage('Test Front-End with Robot Framework') {
            steps {
                script {
                    dir('microservices/model_inference') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            // Run tests inside the container but don't fail the pipeline if tests fail
                            sh '''
                            docker run --rm ${DOCKERHUB_REPO}:latest robot --outputdir /app/output /app/tests || true
                            '''
                        }
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}
                    docker tag ${DOCKERHUB_REPO}:latest ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:latest
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh """
                    echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                    docker push ${DOCKERHUB_REPO}:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images...'
            sh "docker rmi ${DOCKERHUB_REPO}:${IMAGE_TAG} || true"
            sh "docker rmi ${ECR_REPO_URI}:${IMAGE_TAG} || true"
        }
        failure {
            echo "Build failed. Please check logs for details."
        }
        success {
            echo "Build succeeded and images are pushed successfully."
        }
    }
}